{"version":3,"file":"web.js","sourceRoot":"","sources":["../../src/web.ts"],"names":[],"mappings":"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","sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type { CryptoPlugin } from './definitions';\n\nexport class CryptoWeb extends WebPlugin implements CryptoPlugin {\n  async echo(options: { value: string }): Promise<{ value: string }> {\n    console.log('ECHO', options);\n    return options;\n  }\n  \n  async generateKeyPair(): Promise<{ publicKey: string; privateKey: string; }> {\n    if(typeof(window.crypto.subtle) === \"undefined\") {\n      throw this.unavailable(\"Subtle API not available\");\n    }\n\n    if(!window.isSecureContext) {\n      throw this.unavailable(\"Unable to use CryptoAPI, not in secure context!\");\n    }\n\n    let generatedKeys = await window.crypto.subtle.generateKey({\n      name: \"ECDH\",\n      namedCurve: \"P-256\"\n    }, true, [\"deriveKey\"]);\n\n    let exportedPrivateKey = await window.crypto.subtle.exportKey(\"pkcs8\", generatedKeys.privateKey);\n    let exportedPublicKey = await window.crypto.subtle.exportKey(\"spki\", generatedKeys.publicKey);\n\n    let publicKeyDER = btoa(String.fromCharCode(...new Uint8Array(exportedPublicKey)));\n    let privateKeyDER = btoa(String.fromCharCode(...new Uint8Array(exportedPrivateKey)));\n\n    return {\n      publicKey: publicKeyDER,\n      privateKey: privateKeyDER\n    }\n  }\n\n  async generateSharedSecret(options: { privateKey: string; publicKey: string; salt: string }): Promise<{ sharedSecret: string; }> {\n    if(typeof(window.crypto.subtle) === \"undefined\") {\n      throw this.unavailable(\"Subtle API not available\");\n    }\n\n    if(!window.isSecureContext) {\n      throw this.unavailable(\"Unable to use CryptoAPI, not in secure context!\");\n    }\n    let privateKeyBuffer = Uint8Array.from(atob(options.privateKey), x => x.charCodeAt(0));\n    let publicKeyBuffer = Uint8Array.from(atob(options.publicKey), x => x.charCodeAt(0));\n\n    this.unavailable(publicKeyBuffer.toString() + \" \" + privateKeyBuffer.toString());\n\n    let privateKeyImported = await window.crypto.subtle.importKey(\"pkcs8\", privateKeyBuffer, {\n      name: \"ECDH\",\n      namedCurve: \"P-256\"\n    }, false, [\"deriveBits\"]);\n\n    let publicKeyImported = await window.crypto.subtle.importKey(\"spki\", publicKeyBuffer, {\n      name: \"ECDH\",\n      namedCurve: \"P-256\"\n    }, true, []);\n\n    let derivedSharedSecret = await window.crypto.subtle.deriveBits({\n      name: \"ECDH\",\n      public: publicKeyImported\n    }, privateKeyImported, 256);\n\n    let importedSharedSecret = await window.crypto.subtle.importKey(\"raw\", derivedSharedSecret, \"HKDF\", false, ['deriveBits']);\n\n    let saltBytes = Uint8Array.from(atob(options.salt), x => x.charCodeAt(0));\n    \n    let derivedKey = await window.crypto.subtle.deriveBits({\n      name: \"HKDF\",\n      hash: \"SHA-256\",\n      salt: saltBytes,\n      info: new Uint8Array()\n    }, importedSharedSecret, 256);\n\n    return {\n      sharedSecret: btoa(String.fromCharCode(...new Uint8Array(derivedKey)))\n    }\n  }\n\n  async generateRandomBytes(options: { count: number; }): Promise<{ bytesBase64: string}> {\n    if(typeof(window.crypto) === \"undefined\") {\n      throw this.unavailable(\"Crypto API not available\");\n    }\n\n    const randomBytes = new Uint8Array(options.count);\n    window.crypto.getRandomValues(randomBytes);\n\n    return {\n      bytesBase64: btoa(String.fromCharCode(...randomBytes))\n    };\n  }\n\n  async encrypt(options: { key: string; data: string; }): Promise<{ encryptedData: string; tag: string; iv: string; }> {\n    if(typeof(window.crypto) === \"undefined\") {\n      throw this.unavailable(\"Crypto API not available\");\n    }\n\n    // IV must be 12 bytes for this AES-GCM\n    const randomBytes = await this.generateRandomBytes({\n      count: 12\n    });\n\n    const ivBytes = Uint8Array.from(atob(randomBytes.bytesBase64), x => x.charCodeAt(0));\n    let keyBytes = Uint8Array.from(atob(options.key), x => x.charCodeAt(0));\n\n    const importedKey = await window.crypto.subtle.importKey(\"raw\", keyBytes, {\n      \"name\": \"AES-GCM\"\n    }, false, [\"encrypt\"]);\n\n    const dataBytes = Uint8Array.from(options.data, x => x.charCodeAt(0));\n\n    const encryptedBytesandTag = await window.crypto.subtle.encrypt({\n      name: \"AES-GCM\",\n      iv: ivBytes,\n      tagLength: 128\n    }, importedKey, dataBytes);\n\n    // returns data as base64\n    // returns IV as this must be sent with the message to be decrypted (iv doesn't have to be secret just random)\n\n    const encryptedBytes = encryptedBytesandTag.slice(0, encryptedBytesandTag.byteLength-16);\n    const tag = encryptedBytesandTag.slice(encryptedBytesandTag.byteLength-16);\n    return {\n      encryptedData: btoa(String.fromCharCode(...new Uint8Array(encryptedBytes))),\n      tag: btoa(String.fromCharCode(...new Uint8Array(tag))),\n      iv: btoa(String.fromCharCode(...ivBytes))\n    }\n  }\n  async decrypt(options: { key: string; encryptedData: string; tag: string; iv: string; }): Promise<{ unencryptedData: string; }> {\n    if(typeof(window.crypto) === \"undefined\") {\n      throw this.unavailable(\"Crypto API not available\");\n    }\n\n    const ivBytes = Uint8Array.from(atob(options.iv), x => x.charCodeAt(0));\n    let keyBytes = Uint8Array.from(atob(options.key), x => x.charCodeAt(0));\n\n    const importedKey = await window.crypto.subtle.importKey(\"raw\", keyBytes, {\n      \"name\": \"AES-GCM\"\n    }, false, [\"decrypt\"]);\n\n    const encryptedDataBytes = Uint8Array.from(atob(options.encryptedData), x => x.charCodeAt(0));\n    const tagBytes = Uint8Array.from(atob(options.tag), x => x.charCodeAt(0));\n\n    let tagAndBytes = new Uint8Array(encryptedDataBytes.length + tagBytes.length);\n    tagAndBytes.set(encryptedDataBytes);\n    tagAndBytes.set(tagBytes, encryptedDataBytes.length);\n\n    const unencryptedData = await window.crypto.subtle.decrypt({\n      name: \"AES-GCM\",\n      iv: ivBytes,\n      tagLength: 128\n    }, importedKey, tagAndBytes);\n\n    return {\n      unencryptedData: new TextDecoder().decode(unencryptedData)\n    }\n  }\n}\n"]}